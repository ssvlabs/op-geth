// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package native

import (
	"encoding/json"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/vm"
)

var _ = (*ssvOperationMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s SSVOperation) MarshalJSON() ([]byte, error) {
	type SSVOperation struct {
		Type         vm.OpCode      `json:"-"`
		Address      common.Address `json:"address"`
		CallData     hexutil.Bytes  `json:"callData,omitempty" rlp:"optional"`
		StorageKey   hexutil.Bytes  `json:"storageKey,omitempty" rlp:"optional"`
		StorageValue hexutil.Bytes  `json:"storageValue,omitempty" rlp:"optional"`
		From         common.Address `json:"from"`
		Gas          hexutil.Uint64 `json:"gas"`
		TypeString   string         `json:"type"`
	}
	var enc SSVOperation
	enc.Type = s.Type
	enc.Address = s.Address
	enc.CallData = s.CallData
	enc.StorageKey = s.StorageKey
	enc.StorageValue = s.StorageValue
	enc.From = s.From
	enc.Gas = hexutil.Uint64(s.Gas)
	enc.TypeString = s.TypeString()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *SSVOperation) UnmarshalJSON(input []byte) error {
	type SSVOperation struct {
		Type         *vm.OpCode      `json:"-"`
		Address      *common.Address `json:"address"`
		CallData     *hexutil.Bytes  `json:"callData,omitempty" rlp:"optional"`
		StorageKey   *hexutil.Bytes  `json:"storageKey,omitempty" rlp:"optional"`
		StorageValue *hexutil.Bytes  `json:"storageValue,omitempty" rlp:"optional"`
		From         *common.Address `json:"from"`
		Gas          *hexutil.Uint64 `json:"gas"`
	}
	var dec SSVOperation
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Type != nil {
		s.Type = *dec.Type
	}
	if dec.Address != nil {
		s.Address = *dec.Address
	}
	if dec.CallData != nil {
		s.CallData = *dec.CallData
	}
	if dec.StorageKey != nil {
		s.StorageKey = *dec.StorageKey
	}
	if dec.StorageValue != nil {
		s.StorageValue = *dec.StorageValue
	}
	if dec.From != nil {
		s.From = *dec.From
	}
	if dec.Gas != nil {
		s.Gas = uint64(*dec.Gas)
	}
	return nil
}
