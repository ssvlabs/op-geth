syntax = "proto3";

package rollup.v1;

option go_package = "github.com/ethereum/go-ethereum/internal/rollup-shared-publisher/proto/rollup/v1;rollupv1";

// Connection-level authentication handshake messages
message HandshakeRequest {
  int64 timestamp = 1;           // Client timestamp for replay protection
  bytes public_key = 2;          // Client's public key (33 bytes compressed)
  bytes signature = 3;           // ECDSA signature over timestamp
  string client_id = 4;          // Optional client identifier
  bytes nonce = 5;           // Random nonce for replay protection
}

message HandshakeResponse {
  bool accepted = 1;             // Whether authentication succeeded
  string error = 2;              // Error message if rejected
  string session_id = 3;         // Unique session identifier
}

// Transaction ID (SHA256 hash)
message XtID {
  bytes hash = 1; // 32-byte SHA256 hash
}

// Cross-chain transaction request
message XTRequest {
  repeated TransactionRequest transactions = 1;
}

// TransactionRequest represents a single transaction request for a specific chain
message TransactionRequest {
  bytes chain_id = 1;
  repeated bytes transaction = 2; // RLP encoded Ethereum transactions
}

// 2PC Vote message from a sequencer to the SP
message Vote {
  bytes sender_chain_id = 1; // Which chain is voting
  XtID xt_id = 2; // Transaction ID
  bool vote = 3; // true = Commit, false = Abort
}

// 2PC Decision message from the SP to sequencers
message Decided {
  XtID xt_id = 1; // Transaction ID
  bool decision = 2; // true = Commit, false = Abort
}

// Block submission from a sequencer to the SP
message Block {
  bytes chain_id = 1; // Which chain's block
  bytes block_data = 2; // The actual block data
  repeated XtID included_xt_ids = 3; // Which xTs are included
}

// Direct CIRC message exchange between sequencers (without SP involvement)
message CIRCMessage {
  bytes source_chain = 1;
  bytes destination_chain = 2;
  repeated bytes source = 3;
  repeated bytes receiver = 4;
  XtID xt_id = 5;
  string label = 6;
  repeated bytes data = 7; // ABI encoded data
}

// Cross-chain transaction result from a sequencer
// Sent between sequencers to communicate final transaction details
message CrossChainTxResult {
  XtID xt_id = 1; // Transaction ID this result belongs to
  bytes chain_id = 2; // Chain that processed the transaction
  bytes original_hash = 3; // Original transaction hash submitted (32 bytes)
  bytes final_hash = 4; // Final transaction hash executed (32 bytes, may differ if re-signed)
}

// =============================================================================
// SUPERBLOCK CONSTRUCTION PROTOCOL (SBCP) MESSAGES
// =============================================================================

// Auxiliary message for requesting specific L2 blocks
message L2BlockRequest {
  bytes chain_id = 1;
  uint64 block_number = 2;
  bytes parent_hash = 3;
}

// Message sent by SP to start a new slot
message StartSlot {
  uint64 slot = 1; // Current slot number
  uint64 next_superblock_number = 2; // Superblock number SP aims to produce
  bytes last_superblock_hash = 3; // Hash of the last valid superblock
  repeated L2BlockRequest l2_blocks_request = 4; // L2 blocks to be built by each rollup
}

// Message sent by SP to request sequencers seal their blocks
message RequestSeal {
  uint64 slot = 1; // Current slot number
  repeated bytes included_xts = 2; // List of included cross-chain transaction IDs
}

// Message sent by SP to rollback and restart from a valid state
message RollBackAndStartSlot {
  repeated L2BlockRequest l2_blocks_request = 1; // L2 blocks to build from valid state
  uint64 current_slot = 2; // Current slot number
  uint64 next_superblock_number = 3; // Next superblock number to produce
  bytes last_superblock_hash = 4; // Hash of last valid superblock
}

// L2 Block submission from sequencer to SP
message L2Block {
  uint64 slot = 1; // Slot this block belongs to
  bytes chain_id = 2; // Chain identifier
  uint64 block_number = 3; // L2 block number
  bytes block_hash = 4; // Hash of this L2 block
  bytes parent_block_hash = 5; // Hash of parent L2 block
  repeated bytes included_xts = 6; // Included cross-chain transaction IDs
  bytes block = 7; // Encoded Ethereum block data (RLP encoded)
}

// SCP message to start cross-chain transaction coordination
message StartSC {
  uint64 slot = 1; // Current slot number
  uint64 xt_sequence_number = 2; // Sequence number for ordering within slot
  XTRequest xt_request = 3; // The cross-chain transaction request
  bytes xt_id = 4; // 32-byte SHA256 hash over xTRequest
}

// Wrapper for all messages
message Message {
  string sender_id = 1; // Identifier of the sender
  // Payload contains the actual message content
  oneof payload {
    XTRequest xt_request = 2;
    Vote vote = 3;
    Decided decided = 4;
    Block block = 5;
    CIRCMessage circ_message = 6;

    // SBCP messages
    StartSlot start_slot = 7;
    RequestSeal request_seal = 8;
    RollBackAndStartSlot roll_back_and_start_slot = 9;
    L2Block l2_block = 10;
    StartSC start_sc = 11;

    // Connection-level authentication
    HandshakeRequest handshake_request = 12;
    HandshakeResponse handshake_response = 13;

    // Transaction result communication
    CrossChainTxResult cross_chain_tx_result = 14;
  }
}
